
/// Maximum posible quadrance RGB colors with 8-bit per channel
/* This quadrance is the in fact given by two opposite colors! */
static MAX_QUADRANCE: u32 = 3 * 255 * 255;

/// Calculates the quadrance of two RGB colors to measure similarity
/* The quadrance is a quadratic measure to compare how similar two colors are
 * and is defined by the sum of the squares of the differences of each channel
 * when the two color are equal the quadrance is equal to zero,
 * The biggest the quadrance can be is when comparing opposite colors (as white and black)
 * and can be shown to be three times the maximum value of the channels,
 * in this case each channels has an maximum equal to 255 thus the
 * quadrance(white, black) = 3 * 255^2 */
pub fn quadrance(r0: u8, g0: u8, b0: u8, r1: u8, g1: u8, b1: u8) -> u32 {
    let q = i32::pow(r0 as i32 - r1 as i32, 2)
        + i32::pow(g0 as i32 - g1 as i32, 2)
        + i32::pow(b0 as i32 - b1 as i32, 2);

    q as u32
}

/// Find the best approximate color in the 256 Terminal colors palette
/// to the given RGB value
/// and returns the index of best color
/* Find the terminal color that minimizes the asimilarity of a general RGB color
 * by a exahustive calculation of quadrances, return the index of the color which minimizes the quadrance*/
pub fn minimize(r: u8, g: u8, b: u8) -> u8 {
    let mut minimized = MAX_QUADRANCE;
    let mut index_minimized: u8 = 0;
    let mut index: usize = 0;
    for color in TERM256_COLOR {
        let q = quadrance(color.0, color.1, color.2, r, g, b);
        if q <= minimized {
            minimized = q;
            index_minimized = index as u8;
        }
        index += 1;
    }
    //TERM256_COLOR[index_minimized]
    index_minimized
}

/// Array of 256 Terminal Colors with their RGB (24-bit) equivalent
/// ordered with the standard indexing

/* List generated by a custom script on the 6x6x6 cube color */
pub static TERM256_COLOR: [(u8, u8, u8); 256] = [
    (0x00, 0x00, 0x00),
    (0x80, 0x00, 0x00),
    (0x00, 0x80, 0x00),
    (0x80, 0x80, 0x00),
    (0x00, 0x00, 0x80),
    (0x80, 0x00, 0x80),
    (0x00, 0x80, 0x80),
    (0xC0, 0xC0, 0xC0),
    (0x80, 0x80, 0x80),
    (0xFF, 0x00, 0x00),
    (0xFF, 0xFF, 0x00),
    (0x00, 0xFF, 0x00),
    (0x00, 0x00, 0xFF),
    (0xFF, 0x00, 0xFF),
    (0x00, 0xFF, 0xFF),
    (0xFF, 0xFF, 0xFF),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x5F),
    (0x00, 0x00, 0x87),
    (0x00, 0x00, 0xAF),
    (0x00, 0x00, 0xD7),
    (0x00, 0x00, 0xFF),
    (0x00, 0x5F, 0x00),
    (0x00, 0x5F, 0x5F),
    (0x00, 0x5F, 0x87),
    (0x00, 0x5F, 0xAF),
    (0x00, 0x5F, 0xD7),
    (0x00, 0x5F, 0xFF),
    (0x00, 0x87, 0x00),
    (0x00, 0x87, 0x5F),
    (0x00, 0x87, 0x87),
    (0x00, 0x87, 0xAF),
    (0x00, 0x87, 0xD7),
    (0x00, 0x87, 0xFF),
    (0x00, 0xAF, 0x00),
    (0x00, 0xAF, 0x5F),
    (0x00, 0xAF, 0x87),
    (0x00, 0xAF, 0xAF),
    (0x00, 0xAF, 0xD7),
    (0x00, 0xAF, 0xFF),
    (0x00, 0xD7, 0x00),
    (0x00, 0xD7, 0x5F),
    (0x00, 0xD7, 0x87),
    (0x00, 0xD7, 0xAF),
    (0x00, 0xD7, 0xD7),
    (0x00, 0xD7, 0xFF),
    (0x00, 0xFF, 0x00),
    (0x00, 0xFF, 0x5F),
    (0x00, 0xFF, 0x87),
    (0x00, 0xFF, 0xAF),
    (0x00, 0xFF, 0xD7),
    (0x00, 0xFF, 0xFF),
    (0x5F, 0x00, 0x00),
    (0x5F, 0x00, 0x5F),
    (0x5F, 0x00, 0x87),
    (0x5F, 0x00, 0xAF),
    (0x5F, 0x00, 0xD7),
    (0x5F, 0x00, 0xFF),
    (0x5F, 0x5F, 0x00),
    (0x5F, 0x5F, 0x5F),
    (0x5F, 0x5F, 0x87),
    (0x5F, 0x5F, 0xAF),
    (0x5F, 0x5F, 0xD7),
    (0x5F, 0x5F, 0xFF),
    (0x5F, 0x87, 0x00),
    (0x5F, 0x87, 0x5F),
    (0x5F, 0x87, 0x87),
    (0x5F, 0x87, 0xAF),
    (0x5F, 0x87, 0xD7),
    (0x5F, 0x87, 0xFF),
    (0x5F, 0xAF, 0x00),
    (0x5F, 0xAF, 0x5F),
    (0x5F, 0xAF, 0x87),
    (0x5F, 0xAF, 0xAF),
    (0x5F, 0xAF, 0xD7),
    (0x5F, 0xAF, 0xFF),
    (0x5F, 0xD7, 0x00),
    (0x5F, 0xD7, 0x5F),
    (0x5F, 0xD7, 0x87),
    (0x5F, 0xD7, 0xAF),
    (0x5F, 0xD7, 0xD7),
    (0x5F, 0xD7, 0xFF),
    (0x5F, 0xFF, 0x00),
    (0x5F, 0xFF, 0x5F),
    (0x5F, 0xFF, 0x87),
    (0x5F, 0xFF, 0xAF),
    (0x5F, 0xFF, 0xD7),
    (0x5F, 0xFF, 0xFF),
    (0x87, 0x00, 0x00),
    (0x87, 0x00, 0x5F),
    (0x87, 0x00, 0x87),
    (0x87, 0x00, 0xAF),
    (0x87, 0x00, 0xD7),
    (0x87, 0x00, 0xFF),
    (0x87, 0x5F, 0x00),
    (0x87, 0x5F, 0x5F),
    (0x87, 0x5F, 0x87),
    (0x87, 0x5F, 0xAF),
    (0x87, 0x5F, 0xD7),
    (0x87, 0x5F, 0xFF),
    (0x87, 0x87, 0x00),
    (0x87, 0x87, 0x5F),
    (0x87, 0x87, 0x87),
    (0x87, 0x87, 0xAF),
    (0x87, 0x87, 0xD7),
    (0x87, 0x87, 0xFF),
    (0x87, 0xAF, 0x00),
    (0x87, 0xAF, 0x5F),
    (0x87, 0xAF, 0x87),
    (0x87, 0xAF, 0xAF),
    (0x87, 0xAF, 0xD7),
    (0x87, 0xAF, 0xFF),
    (0x87, 0xD7, 0x00),
    (0x87, 0xD7, 0x5F),
    (0x87, 0xD7, 0x87),
    (0x87, 0xD7, 0xAF),
    (0x87, 0xD7, 0xD7),
    (0x87, 0xD7, 0xFF),
    (0x87, 0xFF, 0x00),
    (0x87, 0xFF, 0x5F),
    (0x87, 0xFF, 0x87),
    (0x87, 0xFF, 0xAF),
    (0x87, 0xFF, 0xD7),
    (0x87, 0xFF, 0xFF),
    (0xAF, 0x00, 0x00),
    (0xAF, 0x00, 0x5F),
    (0xAF, 0x00, 0x87),
    (0xAF, 0x00, 0xAF),
    (0xAF, 0x00, 0xD7),
    (0xAF, 0x00, 0xFF),
    (0xAF, 0x5F, 0x00),
    (0xAF, 0x5F, 0x5F),
    (0xAF, 0x5F, 0x87),
    (0xAF, 0x5F, 0xAF),
    (0xAF, 0x5F, 0xD7),
    (0xAF, 0x5F, 0xFF),
    (0xAF, 0x87, 0x00),
    (0xAF, 0x87, 0x5F),
    (0xAF, 0x87, 0x87),
    (0xAF, 0x87, 0xAF),
    (0xAF, 0x87, 0xD7),
    (0xAF, 0x87, 0xFF),
    (0xAF, 0xAF, 0x00),
    (0xAF, 0xAF, 0x5F),
    (0xAF, 0xAF, 0x87),
    (0xAF, 0xAF, 0xAF),
    (0xAF, 0xAF, 0xD7),
    (0xAF, 0xAF, 0xFF),
    (0xAF, 0xD7, 0x00),
    (0xAF, 0xD7, 0x5F),
    (0xAF, 0xD7, 0x87),
    (0xAF, 0xD7, 0xAF),
    (0xAF, 0xD7, 0xD7),
    (0xAF, 0xD7, 0xFF),
    (0xAF, 0xFF, 0x00),
    (0xAF, 0xFF, 0x5F),
    (0xAF, 0xFF, 0x87),
    (0xAF, 0xFF, 0xAF),
    (0xAF, 0xFF, 0xD7),
    (0xAF, 0xFF, 0xFF),
    (0xD7, 0x00, 0x00),
    (0xD7, 0x00, 0x5F),
    (0xD7, 0x00, 0x87),
    (0xD7, 0x00, 0xAF),
    (0xD7, 0x00, 0xD7),
    (0xD7, 0x00, 0xFF),
    (0xD7, 0x5F, 0x00),
    (0xD7, 0x5F, 0x5F),
    (0xD7, 0x5F, 0x87),
    (0xD7, 0x5F, 0xAF),
    (0xD7, 0x5F, 0xD7),
    (0xD7, 0x5F, 0xFF),
    (0xD7, 0x87, 0x00),
    (0xD7, 0x87, 0x5F),
    (0xD7, 0x87, 0x87),
    (0xD7, 0x87, 0xAF),
    (0xD7, 0x87, 0xD7),
    (0xD7, 0x87, 0xFF),
    (0xD7, 0xAF, 0x00),
    (0xD7, 0xAF, 0x5F),
    (0xD7, 0xAF, 0x87),
    (0xD7, 0xAF, 0xAF),
    (0xD7, 0xAF, 0xD7),
    (0xD7, 0xAF, 0xFF),
    (0xD7, 0xD7, 0x00),
    (0xD7, 0xD7, 0x5F),
    (0xD7, 0xD7, 0x87),
    (0xD7, 0xD7, 0xAF),
    (0xD7, 0xD7, 0xD7),
    (0xD7, 0xD7, 0xFF),
    (0xD7, 0xFF, 0x00),
    (0xD7, 0xFF, 0x5F),
    (0xD7, 0xFF, 0x87),
    (0xD7, 0xFF, 0xAF),
    (0xD7, 0xFF, 0xD7),
    (0xD7, 0xFF, 0xFF),
    (0xFF, 0x00, 0x00),
    (0xFF, 0x00, 0x5F),
    (0xFF, 0x00, 0x87),
    (0xFF, 0x00, 0xAF),
    (0xFF, 0x00, 0xD7),
    (0xFF, 0x00, 0xFF),
    (0xFF, 0x5F, 0x00),
    (0xFF, 0x5F, 0x5F),
    (0xFF, 0x5F, 0x87),
    (0xFF, 0x5F, 0xAF),
    (0xFF, 0x5F, 0xD7),
    (0xFF, 0x5F, 0xFF),
    (0xFF, 0x87, 0x00),
    (0xFF, 0x87, 0x5F),
    (0xFF, 0x87, 0x87),
    (0xFF, 0x87, 0xAF),
    (0xFF, 0x87, 0xD7),
    (0xFF, 0x87, 0xFF),
    (0xFF, 0xAF, 0x00),
    (0xFF, 0xAF, 0x5F),
    (0xFF, 0xAF, 0x87),
    (0xFF, 0xAF, 0xAF),
    (0xFF, 0xAF, 0xD7),
    (0xFF, 0xAF, 0xFF),
    (0xFF, 0xD7, 0x00),
    (0xFF, 0xD7, 0x5F),
    (0xFF, 0xD7, 0x87),
    (0xFF, 0xD7, 0xAF),
    (0xFF, 0xD7, 0xD7),
    (0xFF, 0xD7, 0xFF),
    (0xFF, 0xFF, 0x00),
    (0xFF, 0xFF, 0x5F),
    (0xFF, 0xFF, 0x87),
    (0xFF, 0xFF, 0xAF),
    (0xFF, 0xFF, 0xD7),
    (0xFF, 0xFF, 0xFF),
    (0x08, 0x08, 0x08),
    (0x12, 0x12, 0x12),
    (0x1C, 0x1C, 0x1C),
    (0x26, 0x26, 0x26),
    (0x30, 0x30, 0x30),
    (0x3A, 0x3A, 0x3A),
    (0x44, 0x44, 0x44),
    (0x4E, 0x4E, 0x4E),
    (0x58, 0x58, 0x58),
    (0x62, 0x62, 0x62),
    (0x6C, 0x6C, 0x6C),
    (0x76, 0x76, 0x76),
    (0x80, 0x80, 0x80),
    (0x8A, 0x8A, 0x8A),
    (0x94, 0x94, 0x94),
    (0x9E, 0x9E, 0x9E),
    (0xA8, 0xA8, 0xA8),
    (0xB2, 0xB2, 0xB2),
    (0xBC, 0xBC, 0xBC),
    (0xC6, 0xC6, 0xC6),
    (0xD0, 0xD0, 0xD0),
    (0xDA, 0xDA, 0xDA),
    (0xE4, 0xE4, 0xE4),
    (0xEE, 0xEE, 0xEE),
];
